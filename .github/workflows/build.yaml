name: VTB API BUILD
run-name: ${{ github.actor }} launched pipeline on ${{ github.ref}}
on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: denoland/setup-deno@v2
      - name: Compile project
        run: |
          deno compile --allow-net --target x86_64-pc-windows-msvc -o vtb_win.exe index.ts
          deno compile --allow-net --target x86_64-unknown-linux-gnu -o vtb_linux index.ts
          deno compile --allow-net --target aarch64-apple-darwin -o vtb_mac index.ts
          zip -r vtb_win.zip vtb_win.exe
          zip -r vtb_linux.zip vtb_linux
          zip -r vtb_mac.zip vtb_mac

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name}}
        run: |
          echo "RELEASE=$(gh release create "$tag" --repo="$GITHUB_REPOSITORY" --title="${GITHUB_REPOSITORY#*/} ${tag#v}" --generate-notes)"

      - name: Upload win release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE}}
          asset_path: ./vtb_win.zip
          asset_name: vtb_win.zip
          asset_content_type: application/zip
      - name: Upload linux release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE}}
          asset_path: ./vtb_linux.zip
          asset_name: vtb_linux.zip
          asset_content_type: application/zip
      - name: Upload mac release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE}}
          asset_path: ./vtb_mac.zip
          asset_name: vtb_mac.zip
          asset_content_type: application/zip
